trigger:
  branches:
    include:
      - master
      - rel/*
  paths:
    include:
      - Ix.NET/Source/*
      - .editorconfig
      - azure-pipelines.ix.yml

pr:
  branches:
    include:
      - master
      - rel/*
      - IxAsyncCSharp8
  paths:
    include:
      - Ix.NET/Source/*
      - .editorconfig
      - azure-pipelines.ix.yml

pool:
  vmImage: windows-2019

variables:
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

steps:
- task: DotNetCoreInstaller@0
  inputs:
    version: '3.0.100-preview7-012588'

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . nbgv
  displayName: Install NBGV tool

- script: nbgv cloud -p Ix.NET\Source
  displayName: Set Version

- task: DotNetCoreCLI@2
  inputs:
    command: restore
    feedsToUse: config
    nugetConfigPath: Ix.NET/Source/NuGet.config
    projects: Ix.NET/Source/**/*.csproj
  displayName: Restore

- task: DotNetCoreCLI@2
  inputs:
    command: pack
    packagesToPack: Ix.NET/Source/**/System.Interactive*.csproj;Ix.NET/Source/**/System.Linq.*.csproj;!Ix.NET/Source/**/*.Tests*.csproj;!Ix.NET/Source/refs/**
    configuration: $(BuildConfiguration)
    packDirectory: $(Build.ArtifactStagingDirectory)\artifacts
    verbosityPack: Minimal
  displayName: Pack

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . dotnet-reportgenerator-globaltool
  displayName: Install ReportGenerator tool

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: Ix.NET/Source/**/*.Tests.csproj
    arguments: -c $(BuildConfiguration) --settings Ix.NET/Source/CodeCoverage.runsettings --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
  displayName: Run Tests

- script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/Ix.NET/Source/coverlet/reports -reporttypes:"Cobertura"
  displayName: Create reports

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/Ix.NET/Source/coverlet/reports/Cobertura.xml

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . Codecov.Tool
  displayName: Install Codecov tool
  condition: and(succeeded(), not(eq(variables['CODECOV_TOKEN'], '')))

- script: codecov -f $(Build.SourcesDirectory)/Ix.NET/Source/coverlet/reports/Cobertura.xml --flag ixnet
  env:
    CODECOV_TOKEN: $(CODECOV_TOKEN)
  displayName: Upload coverage to Codecov
  condition: and(succeeded(), not(eq(variables['CODECOV_TOKEN'], '')))

- task: PowerShell@2
  displayName: Authenticode Sign Packages
  inputs:
    filePath: Ix.NET/Source/build/Sign-Package.ps1
  env:
    SignClientUser: $(SignClientUser)
    SignClientSecret: $(SignClientSecret)
    ArtifactDirectory: $(Build.ArtifactStagingDirectory)\artifacts
  condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))

- task: PublishPipelineArtifact@0
  displayName: Publish packages
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)\artifacts
    artifactName: artifacts

- task: PublishPipelineArtifact@0
  displayName: Publish Code Coverage XML
  inputs:
    artifactName: Coverage Report XML
    targetPath: $(Build.SourcesDirectory)/Ix.NET/Source/coverlet/reports/Cobertura.xml
